{"version":3,"sources":["components/Navbar.js","styles/typeColors.js","utils/helpers.js","components/TypeMenu.js","components/PokeCard.js","components/PokeDex.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","background","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","Navbar","searchTerm","setSearchTerm","classes","AppBar","className","elevation","Toolbar","Typography","variant","noWrap","InputBase","placeholder","input","inputProps","value","onChange","e","target","typeColors","normal","fire","water","electric","grass","ice","fighting","poison","ground","flying","psychic","bug","rock","ghost","dragon","dark","steel","fairy","getTypeColor","typeName","colorKey","Object","keys","find","typeKey","heading","fontWeight","TypeMenu","updateFilterTypes","useState","types","setTypes","React","checked","setChecked","useEffect","API_URL","a","fetch","res","ok","Error","json","results","console","log","loadData","handleChange","length","includes","name","prev","filter","type","component","FormGroup","map","idx","FormControlLabel","control","Checkbox","disabled","style","label","maxWidth","id","mediaContainer","margin","fontSize","textTransform","buttonGroup","button","border","PokeCard","data","pokemon","setPokemon","toString","padStart","Fragment","Grid","item","xs","sm","md","Card","CardContent","CardMedia","alt","image","sprites","front_default","align","gutterBottom","ButtonGroup","aria-label","Button","disableElevation","PokeDex","pokemons","container","App","setPokemons","filterTypes","setFilterTypes","filteredPokemons","setFilteredPokemons","URL_BASE","pokeObjArr","pokemon_entries","entry","entry_number","pokemon_species","filterablePokemons","forEach","pokeDexMembers","pokeDexMember","filteredGroup","pdm","url","slice","push","newPoke","some","oldPoke","indexOf","CssBaseline","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d31d494.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport InputBase from '@material-ui/core/InputBase'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport { fade, makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot       : {\r\n\t\tflexGrow   : 1,\r\n\t\tbackground : '#BF625F'\r\n\t},\r\n\tmenuButton : {\r\n\t\tmarginRight : theme.spacing(2)\r\n\t},\r\n\ttitle      : {\r\n\t\tflexGrow                     : 1,\r\n\t\tdisplay                      : 'none',\r\n\t\t[theme.breakpoints.up('sm')]: {\r\n\t\t\tdisplay : 'block'\r\n\t\t}\r\n\t},\r\n\tsearch     : {\r\n\t\tposition                     : 'relative',\r\n\t\tborderRadius                 : theme.shape.borderRadius,\r\n\t\tbackgroundColor              : fade(theme.palette.common.white, 0.15),\r\n\t\t'&:hover'                    : {\r\n\t\t\tbackgroundColor : fade(theme.palette.common.white, 0.25)\r\n\t\t},\r\n\t\tmarginLeft                   : 0,\r\n\t\twidth                        : '100%',\r\n\t\t[theme.breakpoints.up('sm')]: {\r\n\t\t\tmarginLeft : theme.spacing(1),\r\n\t\t\twidth      : 'auto'\r\n\t\t}\r\n\t},\r\n\tsearchIcon : {\r\n\t\tpadding        : theme.spacing(0, 2),\r\n\t\theight         : '100%',\r\n\t\tposition       : 'absolute',\r\n\t\tpointerEvents  : 'none',\r\n\t\tdisplay        : 'flex',\r\n\t\talignItems     : 'center',\r\n\t\tjustifyContent : 'center'\r\n\t},\r\n\tinputRoot  : {\r\n\t\tcolor : 'inherit'\r\n\t},\r\n\tinputInput : {\r\n\t\tpadding                      : theme.spacing(1, 1, 1, 0),\r\n\t\t// vertical padding + font size from searchIcon\r\n\t\tpaddingLeft                  : `calc(1em + ${theme.spacing(4)}px)`,\r\n\t\ttransition                   : theme.transitions.create('width'),\r\n\t\twidth                        : '100%',\r\n\t\t[theme.breakpoints.up('sm')]: {\r\n\t\t\twidth     : '12ch',\r\n\t\t\t'&:focus' : {\r\n\t\t\t\twidth : '20ch'\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}))\r\n\r\nconst Navbar = ({ searchTerm, setSearchTerm }) => {\r\n\tconst classes = useStyles()\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<AppBar className={classes.root} position='static' elevation={0}>\r\n\t\t\t\t<Toolbar>\r\n\t\t\t\t\t<Typography className={classes.title} variant='h6' noWrap>\r\n\t\t\t\t\t\tPokedex\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<div className={classes.search}>\r\n\t\t\t\t\t\t<div className={classes.searchIcon}>\r\n\t\t\t\t\t\t\t<SearchIcon />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<InputBase\r\n\t\t\t\t\t\t\tplaceholder='Search…'\r\n\t\t\t\t\t\t\tclasses={{\r\n\t\t\t\t\t\t\t\troot  : classes.inputRoot,\r\n\t\t\t\t\t\t\t\tinput : classes.inputInput\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tinputProps={{ 'aria-label': 'search' }}\r\n\t\t\t\t\t\t\tvalue={searchTerm}\r\n\t\t\t\t\t\t\tonChange={(e) => setSearchTerm(e.target.value)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Toolbar>\r\n\t\t\t</AppBar>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Navbar\r\n","export const typeColors = {\r\n  normal: \"#A8A77A\",\r\n  fire: \"#EE8130\",\r\n  water: \"#6390F0\",\r\n  electric: \"#F7D02C\",\r\n  grass: \"#7AC74C\",\r\n  ice: \"#96D9D6\",\r\n  fighting: \"#C22E28\",\r\n  poison: \"#A33EA1\",\r\n  ground: \"#E2BF65\",\r\n  flying: \"#A98FF3\",\r\n  psychic: \"#F95587\",\r\n  bug: \"#A6B91A\",\r\n  rock: \"#B6A136\",\r\n  ghost: \"#735797\",\r\n  dragon: \"#6F35FC\",\r\n  dark: \"#705746\",\r\n  steel: \"#B7B7CE\",\r\n  fairy: \"#D685AD\",\r\n};\r\n\r\n","import { typeColors } from '../styles/typeColors'\r\n\r\nexport const getTypeColor = (typeName) => {\r\n  // loop over typeColors object keys and find the key corresponding to the type name of this particular button\r\n  const colorKey = Object.keys(typeColors).find((typeKey) => typeKey === typeName)\r\n  // return the color value in the typeColors object at the found key \r\n  return typeColors[colorKey]\r\n}","import React, { useState, useEffect } from 'react'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport FormGroup from '@material-ui/core/FormGroup'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { getTypeColor } from '../utils/helpers'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\theading : {\r\n\t\tfontWeight : 'bold'\r\n\t}\r\n}))\r\n\r\nconst TypeMenu = ({ updateFilterTypes }) => {\r\n\tconst [ types, setTypes ] = useState([])\r\n\tconst [ checked, setChecked ] = React.useState([])\r\n\r\n\tconst classes = useStyles()\r\n\r\n\tconst URL_BASE = 'https://pokeapi.co/api/v2'\r\n\r\n\tuseEffect(() => {\r\n\t\tconst API_URL = `${URL_BASE}/type`\r\n\t\tconst loadData = async () => {\r\n\t\t\ttry {\r\n\t\t\t\tconst res = await fetch(API_URL)\r\n\t\t\t\tif (!res.ok) throw new Error('could not fetch pokemons')\r\n\t\t\t\tconst json = await res.json()\r\n\t\t\t\tsetTypes(json.results)\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t}\r\n\t\t}\r\n\t\tloadData()\r\n\t}, [])\r\n\r\n\tconst handleChange = (e) => {\r\n\t\tif (checked.length === 2 && !checked.includes(e.target.name)) return\r\n\t\tsetChecked((prev) => {\r\n\t\t\treturn prev.includes(e.target.name)\r\n\t\t\t\t? prev.filter((type) => type !== e.target.name)\r\n\t\t\t\t: [ ...prev, e.target.name ]\r\n\t\t})\r\n\t}\r\n\r\n\tupdateFilterTypes(checked)\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Typography className={classes.heading} component='h3'>\r\n\t\t\t\tFilters\r\n\t\t\t</Typography>\r\n\t\t\t<FormGroup>\r\n\t\t\t\t{types.map((type, idx) => (\r\n\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\tkey={idx}\r\n\t\t\t\t\t\tcontrol={\r\n\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\tchecked={checked.includes(type.name)}\r\n\t\t\t\t\t\t\t\tdisabled={checked.length === 2 && !checked.includes(type.name)}\r\n\t\t\t\t\t\t\t\tname={type.name}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tcolor :\r\n\t\t\t\t\t\t\t\t\t\tchecked.length === 2 && !checked.includes(type.name)\r\n\t\t\t\t\t\t\t\t\t\t\t? 'rgba(0, 0, 0, 0.38)'\r\n\t\t\t\t\t\t\t\t\t\t\t: `${getTypeColor(type.name)}`\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlabel={type.name}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</FormGroup>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default TypeMenu\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { getTypeColor } from '../utils/helpers'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot           : {\r\n\t\tmaxWidth : 345\r\n\t},\r\n\tid             : {\r\n\t\tcolor : '#B3B3B3'\r\n\t},\r\n\tmediaContainer : {\r\n\t\tmargin       : theme.spacing(1, 'auto', 3),\r\n\t\theight       : 150,\r\n\t\twidth        : 150,\r\n\t\tbackground   : '#F0F0F0',\r\n\t\tborderRadius : '50%'\r\n\t},\r\n\tname           : {\r\n\t\tfontSize      : 18,\r\n\t\ttextTransform : 'capitalize',\r\n\t\tfontWeight    : 'bold'\r\n\t},\r\n\tbuttonGroup    : {\r\n\t\twidth   : '100%',\r\n\t\tpadding : '.1rem'\r\n\t},\r\n\tbutton         : {\r\n\t\twidth         : '100%',\r\n\t\tpadding       : '.15rem',\r\n\t\tpointerEvents : 'none',\r\n\t\tborder        : 'none',\r\n\t\ttextTransform : 'capitalize'\r\n\t}\r\n}))\r\n\r\nconst PokeCard = ({ data }) => {\r\n\tconst [ pokemon, setPokemon ] = useState({})\r\n\tconst classes = useStyles()\r\n\tconst URL_BASE = 'https://pokeapi.co/api/v2'\r\n\r\n\tconst id = pokemon.id ? pokemon.id.toString().padStart(3, '0') : ''\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tconst API_URL = `${URL_BASE}/pokemon/${data.id}`\r\n\t\t\t// const API_URL = `${URL_BASE}/pokemon/${data.name}`\r\n\t\t\tconst loadData = async () => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst res = await fetch(API_URL)\r\n\t\t\t\t\tif (!res.ok) throw new Error('could not get poke data')\r\n\t\t\t\t\tconst json = await res.json()\r\n\t\t\t\t\tsetPokemon(json)\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tconsole.log(err)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tloadData()\r\n\r\n\t\t\t// WITHOUT CLEANUP FUNCTION I GET THIS WARNING WHEN I PERFORM A SEARCH\r\n\t\t\t// Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.\r\n\t\t\t// at PokeCard\r\n\r\n\t\t\t// cleanup to address warning seen above\r\n\t\t\treturn () => setPokemon({})\r\n\t\t},\r\n\t\t[ data ]\r\n\t)\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{pokemon && (\r\n\t\t\t\t<Grid item xs={12} sm={6} md={3} >\r\n\t\t\t\t\t<Card className={classes.root}>\r\n\t\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t\t<Typography className={classes.id} component='h3'>{`#${id}`}</Typography>\r\n\t\t\t\t\t\t\t<div className={classes.mediaContainer}>\r\n\t\t\t\t\t\t\t\t<CardMedia\r\n\t\t\t\t\t\t\t\t\tcomponent='img'\r\n\t\t\t\t\t\t\t\t\talt={pokemon.name}\r\n\t\t\t\t\t\t\t\t\timage={pokemon.sprites?.front_default}\r\n\t\t\t\t\t\t\t\t\ttitle={pokemon.name}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tclassName={classes.name}\r\n\t\t\t\t\t\t\t\talign='center'\r\n\t\t\t\t\t\t\t\tgutterBottom\r\n\t\t\t\t\t\t\t\tcomponent='h2'\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{pokemon.name}\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<ButtonGroup className={classes.buttonGroup} aria-label='button group'>\r\n\t\t\t\t\t\t\t\t{pokemon.types?.map((type, idx) => {\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.button}\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={idx}\r\n\t\t\t\t\t\t\t\t\t\t\t\tdisableElevation\r\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ backgroundColor: `${getTypeColor(type.type.name)}` }}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{type.type.name}\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t\t\t</CardContent>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Grid>\r\n\t\t\t)}\r\n\t\t</React.Fragment>\r\n\r\n\t\t// QUESTION -- is there a method to access resources located at a url which is a JSON property.  So for example I could access the individual pokemon data like below so I wouldn't have to make network requests for each individual pokemon.  the JSON object returned by the API_URL/pokemon endpoint looks like { name: 'whatever', url: 'https://pokeapi.co/api/v2/pokemon/1/'}\r\n\t\t// <Grid item xs={4} sm={3}>\r\n\t\t// \t<Card className={classes.root}>\r\n\t\t// \t\t<CardContent>\r\n\t\t// \t\t\t<Typography component='h3'>{pokemon.url.id}</Typography>\r\n\t\t// \t\t\t<CardMedia\r\n\t\t// \t\t\t\tcomponent='img'\r\n\t\t// \t\t\t\talt={pokemon.name}\r\n\t\t// \t\t\t\theight='140'\r\n\t\t// \t\t\t\t// image={pokemon.url.sprites.front_default}\r\n\t\t// \t\t\t\timage={pokemon.url.sprites?.front_default}\r\n\t\t// \t\t\t\ttitle={pokemon.name}\r\n\t\t// \t\t\t/>\r\n\t\t// \t\t\t<Typography gutterBottom variant='h5' component='h2'>\r\n\t\t// \t\t\t\t{pokemon.name}\r\n\t\t// \t\t\t</Typography>\r\n\t\t// \t\t\t<ButtonGroup aria-label='button group'>\r\n\t\t// \t\t\t\t{pokemon.url.types?.map((type, idx) => (\r\n\t\t// \t\t\t\t\t<Button key={idx} disableElevation disabled>\r\n\t\t// \t\t\t\t\t\t{type.type.name}\r\n\t\t// \t\t\t\t\t</Button>\r\n\t\t// \t\t\t\t))}\r\n\t\t// \t\t\t</ButtonGroup>\r\n\t\t// \t\t</CardContent>\r\n\t\t// \t</Card>\r\n\t\t// </Grid>\r\n\t)\r\n}\r\n\r\nexport default PokeCard\r\n","import React from 'react'\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport TypeMenu from './TypeMenu'\r\nimport PokeCard from './PokeCard'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot : {\r\n\t\tpadding : theme.spacing(4, 3)\r\n\t}\r\n}))\r\n\r\nconst PokeDex = ({ pokemons, updateFilterTypes }) => {\r\n\tconst classes = useStyles()\r\n\r\n\treturn (\r\n\t\t<Grid className={classes.root} container spacing={2}>\r\n\t\t\t<Grid item xs={4} sm={2}>\r\n\t\t\t\t<TypeMenu updateFilterTypes={updateFilterTypes} />\r\n\t\t\t</Grid>\r\n\t\t\t<Grid item xs={8} sm={10}>\r\n\t\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t\t{pokemons.length > 0 &&\r\n\t\t\t\t\t\tpokemons.map((pokemon, idx) => <PokeCard key={idx} data={pokemon} />)}\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t)\r\n}\r\n\r\nexport default PokeDex\r\n","import React, { useState, useEffect } from 'react'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\n\r\nimport Navbar from './components/Navbar'\r\nimport PokeDex from './components/PokeDex'\r\n\r\nfunction App() {\r\n\tconst [ pokemons, setPokemons ] = useState([])\r\n\tconst [ searchTerm, setSearchTerm ] = useState('')\r\n\tconst [ filterTypes, setFilterTypes ] = useState([])\r\n\tconst [ filteredPokemons, setFilteredPokemons ] = useState([])\r\n\r\n\tconst URL_BASE = 'https://pokeapi.co/api/v2'\r\n\r\n\t// NOTE...Diglett (#50) is not availale by it's name in the API, though it is by it's id.  API must be broken but I need to access by name for the filtering to work.  I'm mapping the initial fetch to an array of objects with {id, name} so I have both available, but in the PokeCard component I'm making the fetch based on name. I also need the name for the search function.  ALSO...some are not available by id right now\r\n\r\n\t// fetch all pokemons.  the names will be used in the PokeCard to make another request for each card for the specific pokemon data\r\n\tuseEffect(() => {\r\n\t\tconst API_URL = `${URL_BASE}/pokedex/2`\r\n\t\tconst loadData = async () => {\r\n\t\t\ttry {\r\n\t\t\t\tconst res = await fetch(API_URL)\r\n\t\t\t\tif (!res.ok) throw new Error('could not fetch pokemons')\r\n\t\t\t\tconst json = await res.json()\r\n\t\t\t\t// map an array of objects with the data we need\r\n\t\t\t\tconst pokeObjArr = json.pokemon_entries.map((entry) => {\r\n\t\t\t\t\treturn { id: entry.entry_number, name: entry.pokemon_species.name }\r\n\t\t\t\t})\r\n\t\t\t\tsetPokemons(pokeObjArr)\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t}\r\n\t\t}\r\n\t\tloadData()\r\n\t}, [])\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tif (filterTypes.length === 0) return\r\n\t\t\t// loop over each filter type and fetch data\r\n\t\t\tlet filterablePokemons = [ ...filteredPokemons ]\r\n\t\t\tfilterTypes.forEach((type) => {\r\n\t\t\t\tconst API_URL = `${URL_BASE}/type/${type}`\r\n\t\t\t\tconst loadData = async () => {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst res = await fetch(API_URL)\r\n\t\t\t\t\t\tif (!res.ok) throw new Error('could not fetch types')\r\n\t\t\t\t\t\tconst json = await res.json()\r\n\t\t\t\t\t\t// the type endpoint returns all pokemons that match the type, not just the ones from the pokedex, so we need to filter the ones that match the type and are from the pokedex\r\n\t\t\t\t\t\tconst pokeDexMembers = json.pokemon.filter((pokeDexMember) => {\r\n\t\t\t\t\t\t\tconst nameArray = pokemons.map((pokemon) => pokemon.name)\r\n\t\t\t\t\t\t\treturn nameArray.includes(pokeDexMember.pokemon.name)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t// next we want to map the results to an array of objects that match our data structure for pokemons\r\n\t\t\t\t\t\tconst filteredGroup = pokeDexMembers.map((pdm) => {\r\n\t\t\t\t\t\t\tconst id = +pdm.pokemon.url.slice(34, -1)\r\n\t\t\t\t\t\t\tconst name = pdm.pokemon.name\r\n\t\t\t\t\t\t\treturn { id, name }\r\n\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t// if theres only one filter type\r\n\t\t\t\t\t\tif (filterTypes.length === 1) {\r\n\t\t\t\t\t\t\tfilterablePokemons.push(...filteredGroup)\r\n\t\t\t\t\t\t\tsetFilteredPokemons([ ...filterablePokemons ])\r\n\t\t\t\t\t\t\t// otherwise we have two filter types and only want to return results that match both filter types\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tsetFilteredPokemons((prev) => {\r\n\t\t\t\t\t\t\t\t// loop over new filteredGroup\r\n\t\t\t\t\t\t\t\treturn filteredGroup.filter((newPoke) => {\r\n\t\t\t\t\t\t\t\t\t// return only if their name is present in the old filteredPokemons\r\n\t\t\t\t\t\t\t\t\tif (prev.some((oldPoke) => oldPoke.name === newPoke.name)) return true\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\tconsole.log(err)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tloadData()\r\n\t\t\t})\r\n\t\t},\r\n\t\t[ filterTypes ]\r\n\t)\r\n\r\n\tconst search = (pokemons) => {\r\n\t\treturn pokemons.filter((pokemon) => {\r\n\t\t\treturn pokemon.name.indexOf(searchTerm) > -1\r\n\t\t})\r\n\t}\r\n\r\n\tconst updateFilterTypes = (types) => {\r\n\t\tsetFilterTypes(types)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<CssBaseline />\r\n\t\t\t<Navbar searchTerm={searchTerm} setSearchTerm={setSearchTerm} />\r\n\t\t\t<PokeDex\r\n\t\t\t\tpokemons={filterTypes.length > 0 ? search(filteredPokemons) : search(pokemons)}\r\n\t\t\t\tupdateFilterTypes={updateFilterTypes}\r\n\t\t\t/>\r\n\t\t</React.Fragment>\r\n\t)\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}